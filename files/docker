docker exec -ti [name] bash - attach to exist container
docker run --rm -ti ubuntu bash -c "sleep 3; echo all done;"
docker attach [name]
docker ps -l list
docker commit [code, name] name
docker tag [code,name] [tag]
docker rm @(docker ps -aq) remove stoped con

docker run --name test -d ubuntu bash -c   | detach  command
docker logs test  | check what was wrong

docker kill container_name
docker rm container_name

docker run --memory maximum-allowed-memory [image-name] [command]

docker run --cpu-shares
docker run --cpu-quota

------ private network ------

docker run --rm -ti -p 45678:45678 -p 45679:45679 --name server1 ubuntu bash
nc -lp 45678 | nc -lp 45679
nc localhost 45678

docker port [name]

docker run -ti --rm --link server --name client [c.name] bash // link to exist container using name

---never break -----

1.  docker network create testNetwork
2.  docker run --rm -ti --net=testNetwork --name server  ubuntu bash  -> nc -lp 1234
3.  docker run --rn -ti --net=testNetwork --name client ubuntu bash    -> nc server 1234

-----------------------------


docker commit [code]  [name]:[tag]     pattern = companyName/name
docker rmi [name]  | [name][tag]

-------VOLUMES----SHARE-DATA-------


docker run -ti -v /path/to/:folder [name] bash

1.docker run -ti -v /shared-data [name] bash <make data folder>
2.docker run -ti --volumes-from [machine-name] bash



docker run -ti mount type=bind,source=/tmp,target=/test [name] bash

---DOCKER FILE-----

MAINTAINER fname lname <mail>

FROM image
RUN cmd
ADD project.tar.gz /install/
ADD https://test.com /project/
ENV DB_PORT=5432

ENTRYPOINT specifies the start of the command to run
CMD specifies the whole command to run
EXPOSE 8080  || same like -p 1234 in line
VOLUME ["/shared-data"]
VOLUME ["/host/path" "/container/path/"]

docker build -t [name]


make some image with all credential then name image and copy FROM ubuntu:last as bigData
FROM alpine
COPY --from=biData /test /test


-----inspect---

docker inspect --format '{{.State.Pid}}' [container name]


---restart--

docker run -d -p 1234:1234 --restart=always --name registry registry:2

---save--load--
docker save -o my-images.tar.gz test1 test2
docker load -i my-images.tar.gz
------

good dockerfile with cluster
https://github.com/oprearocks/RabbitMQ-Docker-cluster

